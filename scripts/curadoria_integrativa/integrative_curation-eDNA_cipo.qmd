---
title: "Caradoria integrativa das sequências brutas - eDNA Cipó"
author: "Gabriel Mendes, Isadora Valentine"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

#### Atenção!

-   Esse script funciona a partir da extracao das seqs de ASVs contidas no script eDNA_cipo_script.qmd, onde estao as analises realizadas com os dados do projeto eDNA_cipo.

#### Pacotes

```{r}
library(Biostrings)
library(DECIPHER)
library(ShortRead)
library(stringr)
library(tidyverse)
library(ggtree)
library(dplyr)
library(ape)
```

#### Diretórios

-   Criação dos diretórios onde a análise será realizada e onde os resultados serão salvos.

    ```{r}
    # Define standard output/input folder system and verify or create directories as needed
    {
      prjct_path <- "/home/isav/projetos/tcc_eDNA_cipo"
      prjct_radical <- "eDNA_cipo"
      scripts_path <- paste0(prjct_path, "/scripts")
      results_path <- paste0(prjct_path, "/results")
      tbl_path <- paste0(results_path, "/tables")
      env_path <- paste0(prjct_path, "/environment")
      data_path <- paste0(prjct_path, "/data")
      tree_path <- paste0(results_path, "/tree")
      paths <- c(scripts_path, results_path, figs_path, 
             tbl_path, env_path, data_path, tree_path)
    }

    for (dir in paths) {
      if (dir.exists(dir)) {
    print(paste("The directory", dir, "already exists!"))
      } else {
    print(paste("Making", dir, "!" ))
    dir.create(dir) 
      }
    }
    ```

#### Tabela input

-   Tabela que recebe as sequências das ASVs dos dados pré-filtrados pós-pipeline.

    ```{r}
    pre_filt_ASVs <- read.csv("/home/isav/projetos/tcc_eDNA_cipo/results/tables/table-pre_filt_raw_results-2025-09-29.csv", 
                          sep = ",", 
                          check.names = FALSE) %>%
      as_tibble()
    ```

-   Tabela que recebe as sequências das ASVs dos dados filtrados pós-pipeline com sequências curadas

    ```{r}
    # Versao 09 de outubro de 2025
    filt_n_curated_ASVs <- read.csv("/home/isav/projetos/tcc_eDNA_cipo/results/tables/table-filt_curated_results-2025-10-09.csv", 
                          sep = ",", 
                          check.names = FALSE) %>%
      as_tibble()
    ```

-   Criação do objeto com apenas as sequências das ASVs e as informações que irão estar nos cabeçalhos.

    ```{r}
    # pre-filt
    fish_ID_tbl_fasta <- pre_filt_ASVs %>%
      mutate(`Final ID (BLASTn)` = gsub(" ", "_", `Final ID (BLASTn)`)) %>%
      unite(header, `ASV header`, `Final ID (BLASTn)`, sep = " | ",
        `BLASTn pseudo-score`, `Metadata 1`) %>% 
      reframe(header, `Sequence (ASV tip)`) %>% 
      unique()

    # curated ids
    fish_ID_tbl_fasta <- filt_n_curated_ASVs %>% 
      mutate(`Final ID (BLASTn)` = gsub(" ", "_", `Final ID (BLASTn)`)) %>%
      unite(header, `ASV header`, `Final ID (BLASTn)`, sep = "_|_",
        `BLASTn pseudo-score`, `Metadata 1`, `Curated ID`) %>% 
      reframe(header, `Sequence (ASV tip)`) %>% 
      unique()
    ```

#### Alinhamento

-   Criando o arquivo FASTA

    ```{r}
    ASVs_all <- c(rbind(fish_ID_tbl_fasta$header, 
                    fish_ID_tbl_fasta$`Sequence (ASV tip)`))

    write(ASVs_all, paste0(tree_path, "/ASVs_all", "-",
                       Sys.Date(), ".fas", sep = ""))
    ```

-   Criando os objetos Biostring

    ```{r}
    # ASVs eDNA_cipo
    seqs_ASVs_cipo <- readDNAStringSet(paste0(tree_path, "/ASVs_all-2025-10-15.fas"))

    BrowseSeqs(seqs_ASVs_cipo)

    # Sequencias LGC12sDB
    seqs_fish_DB <- readDNAStringSet("/home/igorhan/projetos/LGCdb/LGC12Sdb/LGC12Sdb_complete_noGaps-2024-09-24.fasta")
    ```

-   Realizando o alinhamento preliminar

    ```{r}
    # Alinhando sequencias das ASVs
    algn_ASVs_out <- seqs_ASVs_cipo %>%
      OrientNucleotides() %>% 
      AlignSeqs()

    BrowseSeqs(algn_ASVs_out)

    # Unindo as sequencias das ASVs com o sequencias do LGC12sDB
    ASVs_n_LGC12sDB <- c(algn_ASVs_in, 
                     algn_fish_DB)

    # Alinhar as ASVs e as seqs do LGC12sDB
    algn_ASVs_LGC12sDB <- ASVs_n_LGC12sDB %>% 
      OrientNucleotides() %>% 
      AlignSeqs()

    BrowseSeqs(algn_ASVs_LGC12sDB)
    ```

-   Filtrando grupos externos do LGC12sDB

    ```{r}
    fish_DB_fil <- seqs_fish_DB[!(names(seqs_fish_DB) %>% 
                                str_detect(pattern = "Out"))]
    BrowseSeqs(fish_DB_fil)
    ```

-   Trimmando o LGC12sDB

    ```{r}
    BrowseSeqs(fish_DB_fil)

    trim_fish_DB <- fish_DB_fil %>%
      OrientNucleotides() %>%
      AlignSeqs() %>%
      subseq(start = 1,
         end = 256)

    BrowseSeqs(trim_fish_DB)
    ```

-   Alinhando as sequências do LGC12sDB trimmado com as sequências das ASVs

    ```{r}
    algn_ASVs_LGC12sDB_trim <- c(seqs_ASVs_cipo
                                 #trim_fish_DB
                                 ) %>%
      DECIPHER::RemoveGaps() %>% 
      OrientNucleotides() %>% 
      AlignSeqs(iterations = 100,
            refinements = 100,
            verbose = TRUE)
    
    # Alinhamento para o Daniel
    writeXStringSet(algn_ASVs_LGC12sDB_trim,
                    filepath = paste0(tree_path, "/eDNA_cipo-algn", "-",
                                      Sys.Date(), ".fas", sep = ""))

    BrowseSeqs(algn_ASVs_LGC12sDB_trim)
    ```

#### Árvore

-   Cálculo da matriz de distância

    ```{r}
    ASVs_LGC12sDB_trim_mtrx <- DistanceMatrix(myXStringSet = algn_ASVs_LGC12sDB_trim,
                                          includeTerminalGaps = FALSE,
                                          correction = "Jukes-Cantor",
                                          processors = 20,
                                          verbose = TRUE)
    ```

-   Construção da árvore

    ```{r}
    eDNA_cipo_tree <- njs(ASVs_LGC12sDB_trim_mtrx)

    write.tree(phy = eDNA_cipo_tree,
           digits = 5,
           file = paste0(tree_path, "/eDNA_cipo_tree", "-",
                         Sys.Date(), ".nwk", sep = ""))
      
    ```
